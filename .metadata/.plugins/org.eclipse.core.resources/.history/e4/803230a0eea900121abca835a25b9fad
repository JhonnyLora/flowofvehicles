/**
 * 
 */
package org.jhonnytunes.simulation.flowvehicles;

import java.util.List;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**
 * @author jhonnytunes
 * 
 */

public class Street {

	Street(String name2) {

		this.name = name2;
	}

	private boolean oneWay;

	// A vehicle is one size. If size is two then is a two lane one way
	private int size;

	private StreetSense StreetSense;
	// Streets adjacent
	private Map<Integer, Street> adjacentStreets;

	private List<Integer> lockedIntersections;

	private List<Vehicle> vehicles;

	private String name;

	public boolean isOneWay() {
		return oneWay;
	}

	public void setOneWay(boolean oneWay) {
		this.oneWay = oneWay;
	}

	public int getSize() {
		return size;
	}

	public void setSize(int size) {
		this.size = size;
	}

	public StreetSense getStreetSense() {
		return StreetSense;
	}

	public void setStreetSense(StreetSense StreetSense) {
		this.StreetSense = StreetSense;
	}

	public List<Integer> getLockedIntersections() {
		return lockedIntersections;
	}

	public void setLockedIntersections(List<Integer> lockedIntersections) {
		this.lockedIntersections = lockedIntersections;
	}

	public void addLockedIntersections(int lockedIntersection) {
		if (this.lockedIntersections == null)
			lockedIntersections = new ArrayList<Integer>();

		lockedIntersections.add(lockedIntersection);
	}

	public Map<Integer, Street> getAdjacentStreets() {
		return adjacentStreets;
	}

	public void setAdjacentStreets(Map<Integer, Street> adjacentStreets) {
		this.adjacentStreets = adjacentStreets;
	}

	public void addAdjacentStreets(Integer pos, Street street) {
		if (this.adjacentStreets == null)
			adjacentStreets = new HashMap<Integer, Street>();
		adjacentStreets.put(pos, street);

	}

	public List<Vehicle> getVehicles() {
		return vehicles;
	}

	public void setVehicles(List<Vehicle> vehicles) {
		this.vehicles = vehicles;
	}

	public void addVehicles(Vehicle vehicle) {
		if (this.vehicles == null)
			vehicles = new ArrayList<Vehicle>();
		vehicles.add(vehicle);

		vehicle.setStreet(this);

	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result
				+ ((adjacentStreets == null) ? 0 : adjacentStreets.hashCode());
		result = prime * result + ((name == null) ? 0 : name.hashCode());
		result = prime * result + (oneWay ? 1231 : 1237);
		result = prime * result
				+ ((StreetSense == null) ? 0 : StreetSense.hashCode());
		result = prime * result + size;
		result = prime * result
				+ ((vehicles == null) ? 0 : vehicles.hashCode());
		return result;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		Street other = (Street) obj;
		if (adjacentStreets == null) {
			if (other.adjacentStreets != null)
				return false;
		} else if (!adjacentStreets.equals(other.adjacentStreets))
			return false;
		if (name == null) {
			if (other.name != null)
				return false;
		} else if (!name.equals(other.name))
			return false;
		if (oneWay != other.oneWay)
			return false;
		if (StreetSense != other.StreetSense)
			return false;
		if (size != other.size)
			return false;
		if (vehicles == null) {
			if (other.vehicles != null)
				return false;
		} else if (!vehicles.equals(other.vehicles))
			return false;
		return true;
	}

	public void advance(Vehicle vehicle) {

		// Verify if there is space in front of vehiche

	}

}
